// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  rol_id      Int           @id @unique @default(autoincrement())
  description String
  system      String
  status      Boolean
  users       users[]       @relation("users_x_rol")
  users_x_rol users_x_rol[]
}

model general_log {
  log_id    Int    @id @unique @default(autoincrement())
  system    String
  reference String

  user_id String @db.VarChar(11)
  User    users  @relation(fields: [user_id], references: [dni])
}

model users {
  dni            String  @id @unique
  name           String
  first_surname  String
  second_surname String
  phone          Int?
  email          String
  position       String
  department     Int
  status         Boolean
  password       String

  incidents                  incidents[]
  roles                      roles[]                      @relation("users_x_rol")
  user_x_rol                 users_x_rol[]
  diagnosis                  diagnosis[]
  user                       user_x_incident[]
  log_change_status_incident log_change_status_incident[]
  general_log                general_log[]
}

model user_x_incident {
  assign_code Int    @id @unique @default(autoincrement())
  user_dni    String @map("user_dni_fk") @db.VarChar(11)
  incident_id String @map("incident_id_fk") @db.VarChar(12)

  user     users     @relation(fields: [user_dni], references: [dni])
  incident incidents @relation(fields: [incident_id], references: [incident_id])

  assign_date DateTime
}

model log_change_status_incident {
  log_id         Int       @id @unique @default(autoincrement())
  incident_id    String    @db.VarChar(12)
  incidents      incidents @relation(fields: [incident_id], references: [incident_id])
  change_date    DateTime
  current_status Int
  previous_state Int
  user_dni       String    @db.VarChar(11)
  user           users     @relation(fields: [user_dni], references: [dni])
}

model users_x_rol {
  user_dni String
  role_id  Int
  user     users  @relation(fields: [user_dni], references: [dni], onDelete: Cascade)
  roles    roles  @relation(fields: [role_id], references: [rol_id], onDelete: Cascade)

  @@id([user_dni, role_id])
  @@map("users_x_incidents")
}

model incident_effects {
  id          Int         @id @unique @default(autoincrement())
  description String
  incidents   incidents[]
}

model incident_categories {
  id          Int         @id @unique @default(autoincrement())
  description String
  incidents   incidents[]
}

model incident_status {
  id          Int         @id @unique @default(autoincrement())
  description String
  incidents   incidents[]
}

model incident_risks {
  id          Int         @id @unique @default(autoincrement())
  description String
  incidents   incidents[]
}

model incident_priorities {
  id          Int         @id @unique @default(autoincrement())
  description String
  incidents   incidents[]
}

model incidents {
  incident_id         String   @id @unique @db.VarChar(11)
  name                String
  description         String
  close_justification String
  incident_place      String
  record_date         DateTime
  cost                Float
  time_to_solve       Int

  user_dni String @db.VarChar(11)
  user     users  @relation(fields: [user_dni], references: [dni])

  effect_id Int              @db.Int
  effect    incident_effects @relation(fields: [effect_id], references: [id])

  risk_id Int            @db.Int
  risk    incident_risks @relation(fields: [risk_id], references: [id])

  category_id Int                 @db.Int
  category    incident_categories @relation(fields: [category_id], references: [id])

  prority_id Int                 @db.Int
  priority   incident_priorities @relation(fields: [prority_id], references: [id])

  status_id Int             @db.Int
  status    incident_status @relation(fields: [status_id], references: [id])

  diagnosis                  diagnosis[]
  incident                   user_x_incident[]
  log_change_status_incident log_change_status_incident[]
}

model diagnosis {
  diagnosis_id   Int      @id @unique @default(autoincrement())
  diagnosis_date DateTime
  diagnosis      String
  estimated_time Int
  observation    String
  buy            Boolean
  user_dni       String   @db.VarChar(11)
  user           users    @relation(fields: [user_dni], references: [dni])

  incident_id String    @db.VarChar(11)
  incident    incidents @relation(fields: [incident_id], references: [incident_id])
}
